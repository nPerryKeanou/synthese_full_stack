////////////////////////////////////////////
import express, { Request, Response } from 'express';

const server = express();
server.use(express.json());

server.get('/', (req: Request, res: Response) => {
  res.send({ message: 'API en ligne depuis Node.js + TypeScript' });
});

server.listen(3000, '0.0.0.0', () => {
  console.log('Serveur backend démarré sur http://192.168.1.18:3000');
});
////////////////////////////////////////////

Ce code met en place un server backend minimal avec Express en Node.js + Typescript.
Voici une explication claire, ligne par ligne.

* /#  import express from 'express'; #/
    - Importe le framework Express, qui sert à créer facilement un serveur HTTP avec des routes.
    - C'est la base d'un backend Node.js morderne.

* /#  const server = express();  #/
    - Crée une application Express: server représente ton serveur.

* /# sever.use(express.json()); #/
    - Permet à Express de lire le corps (Body) des requêtes en JSON.
    - Nécessaire pour que req.body fonctionne correctement dans les routes POST/PUT.

* /# server.get('/', (req, res) => {...}); #/
    - Définit une route GET à l'URL '/'.
    - Quand quelqu'un accède à http://localhost:3000/, le serveur renvoie :
        " {"message": "API en ligne depuis Node.js + Typescript"} "

* /# server.listen(3000, '0.0.0.0', () => {...}); #/
    - Lance le serveur HTTP sur le port 3000 et sur le réseau local.
    - Une fois démarré, il affiche :
        Serveur backend démarrré sur http://192.168.x.x:3000


En Résumé :
    ÉLÉMENT                 RÔLE 
    express()               initialise le serveur
    express.json()          active le parsign du JSON
    server.get()            gère une requête GET
    server.listen()         démarre le serveur web