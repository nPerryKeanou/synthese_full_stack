// src/screens/AuthScreen.tsx
// √âcran d'authentification unique avec bascule Login/Register
// - Style: React Native StyleSheet (pas de Tailwind)
// - Requ√™tes: fetch() minimal (modifiable vers axios plus tard)
// - Remplace DEFAULT_API_URL par l'IP locale de ton PC accessible depuis ton t√©l√©phone

import React, { useState, useCallback } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';

// Types de r√©ponse API (√† adapter √† ton backend si besoin)
type AuthResponse = {
  accessToken: string;
  refreshToken: string;
  user?: any;
  message?: string;
};

type Props = {
  // Callback optionnelle √† appeler en cas de succ√®s (ex: enregistrer les tokens, naviguer)
  onAuthSuccess?: (payload: AuthResponse) => void;
  // Permet de surcharger l'URL de base au besoin
  apiBaseUrl?: string;
};

// ‚ö†Ô∏è Remplace par l'IP locale de ton PC (ex: "http://192.168.1.15:3000")
const DEFAULT_API_URL = 'http://192.168.1.15:3000';

export default function AuthScreen({ onAuthSuccess, apiBaseUrl = DEFAULT_API_URL }: Props) {
  // --- √âtats du formulaire
  const [isLogin, setIsLogin] = useState(true); // true = mode Connexion, false = mode Inscription
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirm, setConfirm] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // --- Validation simple
  const isEmailValid = (e: string) => /\S+@\S+\.\S+/.test(e);
  const canSubmit = isLogin
    ? isEmailValid(email) && password.length >= 6
    : name.trim().length > 0 && isEmailValid(email) && password.length >= 6 && password === confirm;

  // --- Bascule Login/Register
  const switchMode = useCallback(() => {
    setIsLogin(prev => !prev);
    setError(null);
  }, []);

  // --- Soumission
  const handleSubmit = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const path = isLogin ? '/auth/login' : '/auth/register';
      const body = isLogin
        ? { email, password }
        : { name: name.trim(), email, password };

      const res = await fetch(`${apiBaseUrl}${path}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      const data: AuthResponse = await res.json();

      if (!res.ok) {
        const msg = (data && (data.message as string)) || 'Une erreur est survenue.';
        setError(msg);
        return;
      }

      // Succ√®s
      onAuthSuccess?.(data);
      Alert.alert('Succ√®s', isLogin ? 'Connexion r√©ussie' : 'Compte cr√©√© !');
      setPassword('');
      setConfirm('');
    } catch (e: any) {
      setError(e?.message ?? 'Impossible de contacter le serveur.');
    } finally {
      setLoading(false);
    }
  }, [isLogin, email, password, name, confirm, apiBaseUrl, onAuthSuccess]);

  return (
    <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <ScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps="handled">
        <Text style={styles.title}>{isLogin ? 'Se connecter' : 'Cr√©er un compte'}</Text>
        <Text style={styles.subtitle}>
          {isLogin ? 'Ravi de te revoir üëã' : 'Bienvenue ! Cr√©e ton compte pour commencer.'}
        </Text>

        {!isLogin && (
          <View style={styles.field}>
            <Text style={styles.label}>Nom</Text>
            <TextInput
              placeholder="Ton nom"
              value={name}
              onChangeText={setName}
              style={styles.input}
              autoCapitalize="words"
              returnKeyType="next"
            />
          </View>
        )}

        <View style={styles.field}>
          <Text style={styles.label}>Email</Text>
          <TextInput
            placeholder="exemple@mail.com"
            value={email}
            onChangeText={setEmail}
            style={styles.input}
            autoCapitalize="none"
            autoCorrect={false}
            keyboardType="email-address"
            returnKeyType="next"
          />
        </View>

        <View style={styles.field}>
          <Text style={styles.label}>Mot de passe</Text>
          <TextInput
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            value={password}
            onChangeText={setPassword}
            style={styles.input}
            secureTextEntry
            returnKeyType={isLogin ? 'done' : 'next'}
          />
        </View>

        {!isLogin && (
          <View style={styles.field}>
            <Text style={styles.label}>Confirmer le mot de passe</Text>
            <TextInput
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              value={confirm}
              onChangeText={setConfirm}
              style={styles.input}
              secureTextEntry
              returnKeyType="done"
            />
          </View>
        )}

        {error && <Text style={styles.error}>{error}</Text>}

        <TouchableOpacity
          style={[styles.button, !canSubmit || loading ? styles.buttonDisabled : null]}
          onPress={handleSubmit}
          disabled={!canSubmit || loading}
          activeOpacity={0.8}
        >
          <Text style={styles.buttonText}>
            {loading ? 'Patiente...' : isLogin ? 'Se connecter' : 'Cr√©er un compte'}
          </Text>
        </TouchableOpacity>

        {isLogin && (
          <TouchableOpacity onPress={() => Alert.alert('Mot de passe', 'TODO: lien vers r√©initialisation')}>
            <Text style={styles.link}>Mot de passe oubli√© ?</Text>
          </TouchableOpacity>
        )}

        <View style={styles.switchRow}>
          <Text style={styles.switchText}>
            {isLogin ? 'Pas encore de compte ?' : 'D√©j√† inscrit ?'}
          </Text>
          <TouchableOpacity onPress={switchMode}>
            <Text style={styles.switchLink}>
              {isLogin ? 'Cr√©er un compte' : 'Se connecter'}
            </Text>
          </TouchableOpacity>
        </View>

        <Text style={styles.hint}>
          Astuce: assure-toi que {`"${apiBaseUrl}"`} est l‚ÄôURL locale de ton serveur accessible depuis le t√©l√©phone.
        </Text>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 24,
    paddingTop: 80,
    backgroundColor: '#FFFFFF',
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 6,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
  },
  field: {
    marginBottom: 14,
  },
  label: {
    fontSize: 14,
    marginBottom: 6,
    color: '#333',
  },
  input: {
    borderWidth: 1,
    borderColor: '#DDD',
    backgroundColor: '#FAFAFA',
    paddingHorizontal: 12,
    paddingVertical: 12,
    borderRadius: 12,
    fontSize: 16,
  },
  error: {
    color: '#B00020',
    marginBottom: 12,
    textAlign: 'center',
  },
  button: {
    backgroundColor: '#1E88E5',
    paddingVertical: 14,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 8,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: '700',
  },
  link: {
    marginTop: 12,
    textAlign: 'center',
    textDecorationLine: 'underline',
    fontSize: 14,
  },
  switchRow: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 18,
  },
  switchText: {
    fontSize: 14,
    color: '#333',
  },
  switchLink: {
    fontSize: 14,
    fontWeight: '700',
    marginLeft: 6,
    textDecorationLine: 'underline',
  },
  hint: {
    fontSize: 12,
    color: '#888',
    textAlign: 'center',
    marginTop: 24,
  },
});

Explication du code, ligne par ligne (claire & utile):

    Je commente par blocs tr√®s courts pour rester lisible. Tout le code est visible dans le panneau √† droite.

Imports
    useState, useCallback : hooks React pour l‚Äô√©tat local et les fonctions m√©moris√©es.
    View, Text, TextInput, etc. : composants natifs RN.
    KeyboardAvoidingView, Platform : pour √©viter que le clavier recouvre les inputs.
    ScrollView : permet de scroller si l‚Äô√©cran est petit.

Types
    AuthResponse : forme attendue de la r√©ponse serveur (tokens + user). Adapte si ton backend renvoie d‚Äôautres champs.
    Props : propri√©t√©s du composant (un callback onAuthSuccess et apiBaseUrl pour l‚ÄôURL de ton API).

Constante d‚ÄôURL
    DEFAULT_API_URL : mets l‚ÄôIP locale de ton PC (ex: http://192.168.1.15:3000). Le t√©l√©phone doit √™tre sur le m√™me Wi-Fi.

Composant AuthScreen
    onAuthSuccess, apiBaseUrl = DEFAULT_API_URL : destructure les props, avec une valeur par d√©faut pour l‚ÄôURL.

√âtats
    isLogin : vrai ‚Üí mode Connexion ; faux ‚Üí mode Inscription.
    name, email, password, confirm : valeurs des inputs.
    loading : g√®re le spinner/disabled sur le bouton pendant l‚Äôappel API.
    error : message d‚Äôerreur √† afficher sous le formulaire.

Validation simple
    isEmailValid : petite regex ‚Äúsuffisante pour d√©marrer‚Äù.
    canSubmit : conditions de validation selon le mode :
    Login : email valide + password ‚â• 6.
    Register : nom non vide + email valide + password ‚â• 6 + confirmation identique.

Bascule de mode
    switchMode : inverse isLogin et efface l‚Äôerreur. useCallback √©vite de recr√©er la fonction √† chaque rendu.

Soumission
    handleSubmit (async) :
        setLoading(true) et setError(null) : pr√©pare l‚Äôappel.
    path : /auth/login ou /auth/register selon isLogin.
    body : JSON envoy√© au backend. En register, on envoie aussi name.
    fetch(...) : POST sur apiBaseUrl + path, Content-Type: application/json.
    res.json() : lit la r√©ponse.
    !res.ok : si le code HTTP n‚Äôest pas 2xx ‚Üí r√©cup√®re message s‚Äôil existe, sinon message g√©n√©rique ‚Üí setError.
    En succ√®s :
    onAuthSuccess?.(data) : si un parent a pass√© un callback, on lui donne les tokens pour qu‚Äôil les stocke (SecureStore plus tard).
        Alert.alert(...) : petit feedback visuel.
    on vide password et confirm.
    catch : erreur r√©seau ‚Üí message lisible.
    finally : setLoading(false) quoi qu‚Äôil arrive.

Rendu
    KeyboardAvoidingView : sur iOS, pousse l‚ÄôUI quand le clavier est visible.
    ScrollView : le contenu d√©file si n√©cessaire (petits √©crans).
    title / subtitle : texte qui change selon le mode.
    Bloc Nom : seulement en Register (!isLogin && ...).
    Bloc Email : autoCapitalize="none", keyboardType="email-address".
    Bloc Mot de passe : secureTextEntry pour cacher.
    Bloc Confirmation : seulement en Register.
    error && <Text style={styles.error}> : affiche l‚Äôerreur si elle existe.
    Bouton :
    style d√©sactiv√© si !canSubmit || loading.
    texte qui change : ‚ÄúSe connecter‚Äù / ‚ÄúCr√©er un compte‚Äù / ‚ÄúPatiente‚Ä¶‚Äù.
    Mot de passe oubli√© ? : visible uniquement en Login (placeholder pour brancher ton flow).
    Switch Login/Register : petite ligne avec lien soulign√© qui appelle switchMode.
    Hint : rappelle l‚ÄôURL API pour √©viter le pi√®ge du localhost.

Styles
    container : padding, fond blanc, flexGrow pour que ScrollView se centre bien.
    title, subtitle : typographie simple.
    field, label, input : espacement + bordure claire + arrondis pour une UI propre.
    error : rouge pour l‚Äôerreur.
    button, buttonDisabled, buttonText : bouton bleu, arrondi, gras.
    link, switchRow, switchText, switchLink : liens sous l‚Äôaction principale.
    hint : petit texte gris en bas.

Comment tester rapidement

Dans App.tsx, importe et rends <AuthScreen apiBaseUrl="http://TON.IP.LOCALE:3000" />.
D√©marre ton backend Express : assure-toi qu‚Äôil √©coute sur 0.0.0.0.
Lance Expo : npx expo start ‚Üí scanne le QR code avec Expo Go.
Essaie Register puis Login. Observe les requ√™tes c√¥t√© serveur.


--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------

App.tsx : point d‚Äôentr√©e. Pour tester vite, tu peux juste afficher AuthScreen.

// App.tsx
import React from "react";
import AuthScreen from "./src/screens/AuthScreen";

export default function App() {
  return <AuthScreen apiBaseUrl="http://192.168.1.15:3000" />;
}

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------

